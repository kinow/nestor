<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nestor-QA</title>
    <description>Nestor-QA is an Open Source test management software
</description>
    <link>http://nestor-qa.org/</link>
    <atom:link href="http://nestor-qa.org/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 19 Jun 2016 14:00:02 +1200</pubDate>
    <lastBuildDate>Sun, 19 Jun 2016 14:00:02 +1200</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>RequireJS, Backbone.js, JWT and much more</title>
        <description>&lt;p&gt;The initial design of Nestor-QA had in mind to do something similar to what Bugzilla did: an
API-first application. API-first applications are software that apply a strategy of building
the API first, and then build the rest of the software around, or on top of it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2016-06-19-requirejs-backbone-jwt-and-much-more/IMG_20160221_164338.jpg&quot; alt=&quot;API example image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We also want to &lt;a href=&quot;https://github.com/nestor-qa/nestor/issues/2&quot;&gt;implement plug-ins&lt;/a&gt; for Nestor-QA in the future.
The plug-ins API must enable users to customize the layout and theme as well. So we decided to build
the web application with JavaScript.&lt;/p&gt;

&lt;p&gt;What we have at the moment is a JavaScript client, that connects to a backend PHP API. The API
was created using &lt;a href=&quot;https://github.com/dingo/api/&quot;&gt;Dingo/API&lt;/a&gt; Laravel library, which also supports
JWT for authentication. The application interface is being built with
&lt;a href=&quot;http://backbonejs.org/&quot;&gt;Backbone.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Building a JavaScript application, specially one that will have so many screens as a test management
software, can generate many screens, require many files, and views, models, collections, etc, in
Backbone.js.&lt;/p&gt;

&lt;p&gt;For that, we are building the software with &lt;a href=&quot;http://requirejs.org/&quot;&gt;RequireJS&lt;/a&gt;. This way we are
being able to organise the code in modules. There are already tests in PHP, and now we will start
writing JavaScript tests too. It looks like using RequireJS may also help us writing tests for
JavaScript, since we can inject modules, and isolate the tests per functionality.&lt;/p&gt;

&lt;p&gt;That’s all for now. There are still many issues open, and a lot to be done before the next release
of Nestor-QA. So keep an eye open for more awesome stuff :-)&lt;/p&gt;

</description>
        <pubDate>Sun, 19 Jun 2016 00:00:00 +1200</pubDate>
        <link>http://nestor-qa.org/blog/2016/06/19/requirejs-backbone-jwt-and-much-more.html</link>
        <guid isPermaLink="true">http://nestor-qa.org/blog/2016/06/19/requirejs-backbone-jwt-and-much-more.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Where are we now?</title>
        <description>&lt;p&gt;Nestor-QA started in 2013, but haven’t reached 1.0 yet. In 2013-2014 a lot was done in brainstorming of ideas and stressing out a few possibilities. From that, by the beginning of 2015 we had a 0.1.x version with an almost complete database model.&lt;/p&gt;

&lt;p&gt;However, we still have at least three outstanding issues: make the application API first, implement user authentication and authorization, and implement the plug-in API. Furthermore, the development had to stop for a while as I was relocating to another country.&lt;/p&gt;

&lt;p&gt;In December 2015 I had some spare time and started a sprint to upgrade to Laravel 5.1 from 4.x. And also used a different approach. Use the existing database model, but write repositories on top of it, with RESTful services as wrappers.&lt;/p&gt;

&lt;p&gt;This way, the user interface would always require data to controllers via the RESTful API, and get the data from repositories.&lt;/p&gt;

&lt;p&gt;The UI which was just Twig + HTML, is now a mix of Backbone.JS, Blade and HTML. The whole default interface is a single page app, that relies on the RESTful API. The same API now can be exposed to external users, and documented properly.&lt;/p&gt;

&lt;p&gt;Right now the user authentication is almost ready, and the next step is implement authorization. Then we can write a simple API documentation and experiment with it for a while to confirm users could use it to integrate other tools or extend the system.&lt;/p&gt;

&lt;h2 id=&quot;so-whats-happening-next&quot;&gt;So what’s happening next?&lt;/h2&gt;

&lt;p&gt;Hopefully 0.2 will be ready before June. Then we can focus on what is needed for a 0.9 by December, and then plan a 1.0 release in 2017.&lt;/p&gt;

&lt;h2 id=&quot;how-you-can-help&quot;&gt;How you can help&lt;/h2&gt;

&lt;p&gt;If you know a little bit about web programming, in special PHP or any similar language, you can jump in and start sending code to nestorqa/nestor in GitHub. Otherwise you can join the project by sharing ideas, commenting on issues and reviewing what has been done.&lt;/p&gt;

</description>
        <pubDate>Sun, 24 Jan 2016 00:00:00 +1300</pubDate>
        <link>http://nestor-qa.org/blog/2016/01/24/where-are-we-now.html</link>
        <guid isPermaLink="true">http://nestor-qa.org/blog/2016/01/24/where-are-we-now.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Version 0.9 and YUI</title>
        <description>&lt;p&gt;We are glad to announce Nestor-QA 0.9. This version fixes several issues, many 
reported by Olivier Renault (many thanks!). We started Nestor-QA and added jQuery 
for Javascript. However, without noticing, we started to get parts of Javascript 
code duplicated all over the project.&lt;/p&gt;

&lt;p&gt;There are many Javascript MVC Frameworks out there now. Our chosen framework was 
&lt;a href=&quot;http://yuilibrary.com/&quot;&gt;YUI&lt;/a&gt;. It is not exactly equal to Backbone.JS or AngularJS, 
but fits perfectly well in the Nestor-QA code base.&lt;/p&gt;

&lt;p&gt;Adding drag and drop, creating new DOM elements, and creating reusable elements is much 
easier with YUI, and creates less tangled code (though with jQuery plug-ins and some other 
modules/plugins we could achieve the same); Furthermore, Jenkins also uses YUI, so 
hopefully we will be able to learn with Jenkins codebase too.&lt;/p&gt;

&lt;p&gt;The 0.9 release includes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nestor-qa/nestor/issues/57&quot;&gt;issue 57&lt;/a&gt;: Display the status of test execution&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nestor-qa/nestor/issues/56&quot;&gt;issue 56&lt;/a&gt;: Define a “prerequisite” at the TC level&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nestor-qa/nestor/issues/50&quot;&gt;issue 50&lt;/a&gt;: Hide Sub Test Suite create form&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nestor-qa/nestor/issues/48&quot;&gt;issue 48&lt;/a&gt;: Orphan Test Case&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nestor-qa/nestor/issues/47&quot;&gt;issue 47&lt;/a&gt;: TS/TC creation with an existing name is not explicitly forbidden&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nestor-qa/nestor/issues/38&quot;&gt;issue 38&lt;/a&gt;: Docs about the DB repositories&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nestor-qa/nestor/issues/35&quot;&gt;issue 35&lt;/a&gt;: Remove test suites&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nestor-qa/nestor/issues/33&quot;&gt;issue 33&lt;/a&gt;: Test Execution&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 30 Mar 2014 00:00:00 +1300</pubDate>
        <link>http://nestor-qa.org/blog/2014/03/30/version-0.9-and-yui.html</link>
        <guid isPermaLink="true">http://nestor-qa.org/blog/2014/03/30/version-0.9-and-yui.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Nestor QA first post</title>
        <description>&lt;p&gt;This is our first post. Not much to say yet, but stay tuned and wait for our 
upcoming releases.&lt;/p&gt;
</description>
        <pubDate>Fri, 25 Oct 2013 00:00:00 +1300</pubDate>
        <link>http://nestor-qa.org/blog/2013/10/25/nestor-qa-first-post.html</link>
        <guid isPermaLink="true">http://nestor-qa.org/blog/2013/10/25/nestor-qa-first-post.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
